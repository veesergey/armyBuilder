/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package armyFrames;

import armyBuilder.Monster;
import armyBuilder.function;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.*;
import armyBuilder.textReader;

/**
 *
 * @author veese
 */
public class mainFrame extends javax.swing.JFrame {

    /**
     * Creates new form mainFrame
     */
    public mainFrame() {
        initComponents();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        startBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListRaces = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListNames = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaRaces = new javax.swing.JTextArea();
        newRaceBtn = new javax.swing.JButton();
        delRaceBtn = new javax.swing.JButton();
        newProfBtn = new javax.swing.JButton();
        delProfBtn = new javax.swing.JButton();
        quitBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListUnits = new javax.swing.JList<>();
        addUnitBtn = new javax.swing.JButton();
        delUnitBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        editRaceBtn = new javax.swing.JButton();
        editProfBtn = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextAreaProfs = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaUnits = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Army Builder");

        jLabel2.setText("Races");

        startBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        startBtn.setText("Start/Refresh");
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Professions");

        jListRaces.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListRaces.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                racesListSelect(evt);
            }
        });
        jScrollPane3.setViewportView(jListRaces);

        jListNames.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                profSelected(evt);
            }
        });
        jScrollPane4.setViewportView(jListNames);

        jTextAreaRaces.setEditable(false);
        jTextAreaRaces.setColumns(20);
        jTextAreaRaces.setLineWrap(true);
        jTextAreaRaces.setRows(5);
        jScrollPane1.setViewportView(jTextAreaRaces);

        newRaceBtn.setText("New Race");
        newRaceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRaceBtnActionPerformed(evt);
            }
        });

        delRaceBtn.setText("Delete Race");
        delRaceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delRaceBtnActionPerformed(evt);
            }
        });

        newProfBtn.setText("New Profession");
        newProfBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProfBtnActionPerformed(evt);
            }
        });

        delProfBtn.setText("Delete Profession");
        delProfBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delProfBtnActionPerformed(evt);
            }
        });

        quitBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        quitBtn.setText("Exit");
        quitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("Current Army");

        jListUnits.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jLIstUnitsSelected(evt);
            }
        });
        jScrollPane5.setViewportView(jListUnits);

        addUnitBtn.setText("Add Unit");
        addUnitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUnitBtnActionPerformed(evt);
            }
        });

        delUnitBtn.setText("Delete Unit");
        delUnitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delUnitBtnActionPerformed(evt);
            }
        });

        jButton1.setText("Help");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        editRaceBtn.setText("Edit Race");
        editRaceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRaceBtnActionPerformed(evt);
            }
        });

        editProfBtn.setText("Edit Profession");
        editProfBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editProfBtnActionPerformed(evt);
            }
        });

        jTextAreaProfs.setColumns(20);
        jTextAreaProfs.setRows(5);
        jScrollPane7.setViewportView(jTextAreaProfs);

        jTextAreaUnits.setColumns(20);
        jTextAreaUnits.setRows(5);
        jScrollPane2.setViewportView(jTextAreaUnits);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(jLabel2)
                .addGap(227, 227, 227)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(193, 193, 193))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane3)
                                        .addComponent(jScrollPane1))
                                    .addComponent(delRaceBtn))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jScrollPane4)
                                            .addComponent(jScrollPane7))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addComponent(delProfBtn)))))
                        .addGap(23, 23, 23))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(newRaceBtn)
                                .addGap(18, 18, 18)
                                .addComponent(editRaceBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jButton1)))
                        .addGap(83, 83, 83)
                        .addComponent(newProfBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 131, Short.MAX_VALUE)
                                .addComponent(quitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(editProfBtn)
                                .addGap(47, 47, 47)
                                .addComponent(addUnitBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(delUnitBtn)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {delRaceBtn, newRaceBtn});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newRaceBtn)
                    .addComponent(newProfBtn)
                    .addComponent(addUnitBtn)
                    .addComponent(editRaceBtn)
                    .addComponent(editProfBtn)
                    .addComponent(delUnitBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delRaceBtn)
                    .addComponent(delProfBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(14, 14, 14))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {delRaceBtn, newRaceBtn});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
        // TODO add your handling code here:
        
        //Creates a list model for jListOfRaces
        DefaultListModel raceListModel = new DefaultListModel();
        
        //Path to monster file
        Path monsterPath = Paths.get("textFiles/monList.txt");
        
        //ArrayList created from textFile, path passed to function returning an array
        ArrayList<Monster> monsterList = textReader.getList(monsterPath);
        
        
        for (Monster mon : monsterList){
            raceListModel.addElement(mon.getRace());
        }
        
        //Sets the model to list..duh
        jListRaces.setModel(raceListModel);
        
        //Does the same but for the list of professions---------------->
        DefaultListModel nameListModel = new DefaultListModel();
        
        Path profPath = Paths.get("textFiles/profList.txt");
        
        ArrayList<Monster> professionList = textReader.getList(profPath);
        
        for (Monster mon : professionList){
            nameListModel.addElement(mon.getRace());
        }
        jListNames.setModel(nameListModel);
        
        //Again the same thing but for current army List----------------->
        DefaultListModel unitListModel = new DefaultListModel();
        
        Path armyPath = Paths.get("textFiles/armyList.txt");
        
        ArrayList<Monster> unitList = textReader.getList(armyPath);
        
        for (Monster mon : unitList){
            unitListModel.addElement(mon.getRace());
        }
        jListUnits.setModel(unitListModel);
        
        //Clear text of all bottom boxes
        jTextAreaProfs.setText("");
        jTextAreaRaces.setText("");
        jTextAreaUnits.setText("");
        
    }//GEN-LAST:event_startBtnActionPerformed

    private void racesListSelect(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_racesListSelect
        // TODO add your handling code here:
        String selected = jListRaces.getSelectedValue();
        
        Path monsterPath = Paths.get("textFiles/monList.txt");
        
        ArrayList<Monster> monsterList = textReader.getList(monsterPath);
        
        
        if (selected == null){
            jTextAreaRaces.setText("");
        }
        else
        {
            for (Monster mon : monsterList){
                if (selected.equals(mon.getRace())){
                    jTextAreaRaces.setText(mon.getDesc());
                }
            }
        }
        
    }//GEN-LAST:event_racesListSelect

    private void profSelected(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_profSelected
        // TODO add your handling code here:
        
        String selected = jListNames.getSelectedValue();
        
        Path profPath = Paths.get("textFiles/profList.txt");
        
        ArrayList<Monster> profList = textReader.getList(profPath);
        
        if (selected == null){
            jTextAreaRaces.setText("");
            System.out.println(selected + " is selected.");
        }
        else
        {
            for (Monster mon : profList){
                if (selected.equals(mon.getRace())){
                    jTextAreaProfs.setText(mon.getDesc());
                }
            }
        }
        
    }//GEN-LAST:event_profSelected

    private void newRaceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRaceBtnActionPerformed
        // TODO add your handling code here:
        new createRaceFrame().setVisible(true);
        
    }//GEN-LAST:event_newRaceBtnActionPerformed

    private void newProfBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProfBtnActionPerformed
        // TODO add your handling code here:
        new createProfession().setVisible(true);
    }//GEN-LAST:event_newProfBtnActionPerformed

    private void quitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitBtnActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_quitBtnActionPerformed

    private void delRaceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delRaceBtnActionPerformed
        // TODO add your handling code here:
        String toErase = jListRaces.getSelectedValue();
        int choice = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete " + toErase + "?");
        
        Path monPath = Paths.get("textFiles/monList.txt");
        
        ArrayList<Monster> monsterList = textReader.getList(monPath);
        
        int i = 0;
        if (choice == 0){
            
            Path filePath = Paths.get("textFiles/monList.txt");
            File monsterFile = filePath.toFile();
            try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(monsterFile))))
            {   
                String toPrint = "";
                for (Monster mon : monsterList){
                    if (mon.getRace().equals(toErase))
                    {
                        //just do nothing if its equal to it lol
                    }
                    else
                    {
                        toPrint = mon.getRace() + "," + mon.getDesc() + "," + mon.getAtk();
                        out.println(toPrint);    
                    }
                    
                }
                
            } 
        catch (IOException ex) 
            {
                System.out.println(ex);
            }
            
            
        }
        
        
   
    }//GEN-LAST:event_delRaceBtnActionPerformed

    private void delProfBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delProfBtnActionPerformed
        // TODO add your handling code here:
        String toErase = jListNames.getSelectedValue();
        int choice = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete " + toErase + "?");
        
        Path profPath = Paths.get("textFiles/profList.txt");
        
        ArrayList<Monster> monsterList = textReader.getList(profPath);
        
        if (choice == 0){
            
            File monsterFile = profPath.toFile();
            
            try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(monsterFile))))
            {   
                String toPrint = "";
                for (Monster mon : monsterList){
                    if (mon.getRace().equals(toErase))
                    {
                        //just do nothing if its equal to it lol
                    }
                    else
                    {
                        toPrint = mon.getRace() + "," + mon.getDesc() + "," + mon.getAtk();
                        out.println(toPrint);    
                    }
                    
                }
                
            } 
        catch (IOException ex) 
            {
                System.out.println(ex);
            }
            
            
        }
    }//GEN-LAST:event_delProfBtnActionPerformed

    private void jLIstUnitsSelected(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jLIstUnitsSelected
        // TODO add your handling code here:
        String selected = jListUnits.getSelectedValue();
        
        Path unitPath = Paths.get("textFiles/armyList.txt");
        
        ArrayList<Monster> unitList = textReader.getList(unitPath);
        
        if (selected == null){
            jTextAreaUnits.setText("");
        }
        else
        {
            for (Monster mon : unitList){
                if (selected.equals(mon.getRace())){
                    jTextAreaUnits.setText(mon.getDesc()); // This is technically wrong, the text area box needs to be renamed
                }
            }
        }
    }//GEN-LAST:event_jLIstUnitsSelected

    private void addUnitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUnitBtnActionPerformed
        // TODO add your handling code here:
        //Adds race to units
        String toAdd = jListRaces.getSelectedValue();
        
        Path armyFilePath = Paths.get("textFiles/armyList.txt");
        Path monFilePath = Paths.get("textFiles/monList.txt");
        
        ArrayList<Monster> monsterList = textReader.getList(monFilePath);
        
        String race = "";
        String desc = "";
        String atk = "";
        
        if (toAdd != null){
            if (Files.exists(armyFilePath))
        {
            for (Monster mon : monsterList){
                if (toAdd.equals(mon.getRace())){
                    
                    race = mon.getRace();
                    desc = mon.getDesc();
                    atk = mon.getAtk();
                    
                }
            }
            
            String toPrint = race + "," + desc + "," + atk;
        
            function.addToFile(armyFilePath, toPrint);
        }
            
        }
        
        String toAdd2 = jListNames.getSelectedValue();
        Path profPath = Paths.get("textFiles/profList.txt");
        ArrayList<Monster> nameList = textReader.getList(profPath);
        
        String race2 = "";
        String desc2 = "";
        String atk2 = "";
        
        if (toAdd2 != null){
            if (Files.exists(armyFilePath))
        {
            File monsterFile = armyFilePath.toFile();
            
            for (Monster mon : nameList){
                if (toAdd2.equals(mon.getRace())){
                    
                    race2 = mon.getRace();
                    desc2 = mon.getDesc();
                    atk2 = mon.getAtk();
                    
                }
            }
            
            String toPrint = race2 + "," + desc2 + "," + atk2;
        
            try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(monsterFile, true))))
                { 
                    out.println(toPrint);
                } 
            catch (IOException ex) 
                {
                    System.out.println(ex);
                }
        }
            
        }
        
        JOptionPane.showMessageDialog(this, "Unit(s) Added");
        
        
    }//GEN-LAST:event_addUnitBtnActionPerformed

    private void delUnitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delUnitBtnActionPerformed
        // TODO add your handling code here:
        String toErase = jListUnits.getSelectedValue();
        int choice = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete " + toErase + "?");
        
        Path filePath = Paths.get("textFiles/armyList.txt");
        
        ArrayList<Monster> monsterList = textReader.getList(filePath);
        
        int i = 0;
        if (choice == 0){
            
            
            File monsterFile = filePath.toFile();
            try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(monsterFile))))
            {   
                String toPrint = "";
                for (Monster mon : monsterList){
                    if (mon.getRace().equals(toErase))
                    {
                        //just do nothing if its equal to it lol
                    }
                    else
                    {
                        toPrint = mon.getRace() + "," + mon.getDesc() + "," + mon.getAtk();
                        out.println(toPrint);    
                    }
                    
                }
                
            } 
        catch (IOException ex) 
            {
                System.out.println(ex);
            }
            
            
        }
    }//GEN-LAST:event_delUnitBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(rootPane, "You have base monsters to add to the army to the left, and professional soldiers "
                + " that you can add in the middle under 'professions'. The list to the right that says Current Units are the added"
                + " soldiers. To add units, select a unit from either category (or both) and hit add unit, then refresh." );
    }//GEN-LAST:event_jButton1ActionPerformed

    private void editRaceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRaceBtnActionPerformed
        // TODO add your handling code here:
        String toEdit = jListRaces.getSelectedValue();
        
        Path filePath = Paths.get("textFiles/monList.txt");
        
        if (toEdit == null){
            JOptionPane.showMessageDialog(this, "You must select a race first!");
        }
        else{
        String[] buttons = { "Name", "Description", "Cancel" };

        int choice = JOptionPane.showOptionDialog(null, "What do you want to edit?", "Editing Race",
        JOptionPane.PLAIN_MESSAGE, 0, null, buttons, buttons[2]);
        
        
        
        switch (choice){
            case 0:
                String newRace = JOptionPane.showInputDialog("Enter a new name for this race. Do not use commas.");
                function.replaceString(filePath, toEdit, newRace);
                break;
            case 1:
                String oldDesc = jTextAreaRaces.getText();
                String newDesc = JOptionPane.showInputDialog("Enter a new description for the " + toEdit + ". Do not use commas.");
                function.replaceString(filePath, oldDesc, newDesc);
                break;
        }
        
        }
        
        
    }//GEN-LAST:event_editRaceBtnActionPerformed

    private void editProfBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editProfBtnActionPerformed
        // TODO add your handling code here:
        String toEdit = jListNames.getSelectedValue();
        Path filePath = Paths.get("textFiles/profList.txt");
        
        if (toEdit == null){
            JOptionPane.showMessageDialog(this, "You must select a profession first!");
        }
        else{
        String[] buttons = { "Name", "Description", "Cancel" };

        int choice = JOptionPane.showOptionDialog(null, "What do you want to edit?", "Editing Profession",
        JOptionPane.PLAIN_MESSAGE, 0, null, buttons, buttons[2]);
        
        System.out.println("Choice = " + choice);
        
        switch (choice){
            case 0:
                String oldProf = jListNames.getSelectedValue();
                String newProf = JOptionPane.showInputDialog("Enter a new name for this profession.");
                function.replaceString(filePath, oldProf, newProf);
                break;
            case 1:
                String oldDesc = jTextAreaProfs.getText(); 
                String newDesc = JOptionPane.showInputDialog("Enter a new description for the " + toEdit + ".");
                function.replaceString(filePath, oldDesc, newDesc);
                break;
        }
        
        }
        
        
        
    }//GEN-LAST:event_editProfBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
        
     //--------------------------------------------------------------------
       
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addUnitBtn;
    private javax.swing.JButton delProfBtn;
    private javax.swing.JButton delRaceBtn;
    private javax.swing.JButton delUnitBtn;
    private javax.swing.JButton editProfBtn;
    private javax.swing.JButton editRaceBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jListNames;
    private javax.swing.JList<String> jListRaces;
    private javax.swing.JList<String> jListUnits;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextArea jTextAreaProfs;
    private javax.swing.JTextArea jTextAreaRaces;
    private javax.swing.JTextArea jTextAreaUnits;
    private javax.swing.JButton newProfBtn;
    private javax.swing.JButton newRaceBtn;
    private javax.swing.JButton quitBtn;
    private javax.swing.JButton startBtn;
    // End of variables declaration//GEN-END:variables
}
